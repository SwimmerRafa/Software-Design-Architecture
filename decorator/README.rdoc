= Decorator Design Pattern

This documentation was developed as part of a programming
activity for the <em>Software Design and Architecture</em>
course (_Tc3049_), at the Tecnológico de Monterrey, Campus
Estado de México.

== Authors

* *A01378916* <em>Rafael Moreno Cañas</em>
* *A01379896* <em>Erick Bautista Pérez</em>

== Overview

The <b>Decorator Pattern</b> is a conceptual pattern that allows adding new behaviors to objects dynamically by placing them inside special wrapper objects.
Using decorators you can wrap objects countless number of times since both target objects and decorators follow the same interface. The resulting object 
will get a stacking behavior of all wrappers.

The UML diagram for this programming activity is as follows:

rdoc-image:img/decorator_uml.jpg

To test the program, inside the +src+ folder type the following
instruction at the command line:

            ruby -I . -w coffee_test.rb

==References

- \Design Patterns: Decorator in Ruby. (2020). Retrieved 19 April 2020, 
from https://refactoring.guru/design-patterns/decorator/ruby/example

- \R. Olsen. <em>Design Patterns in Ruby.</em> Addison-Wesley,
2007.
